
IDEAS:

toggling datapipeline active/inactive sets select to next scheduled or paused state. running jobs are unaffected

put js console underchart
put files on left of code so you can break out the html, js , and css
put job files on left also
add run/compile/active buttons for both charts and jobs 
show run progress/output in right column
for datasources show files on left and file contents preview on right

put library code local so I don't have to use the cdn when debuging
put navigate buttons(dropdown for multiple) in center of details pain nav

==========================================================================================

log api:
POST /log <= new log object => bool result and new id
GET  /log/{id}?projection={} => returns log object
GET  /log?key=value&projection={} => returns paged filtered list of log objects ordered by recency
no put or delete
hk='logs', rk=1237812372-1


job api;
POST /jobjurs <= jobrun object => bool result and jobrun id 
GET  /jobrun/{id}?projection={} projected item
GET  /jobrun?key=value&projection={} filtered and projected list
no put or delete
hk='jobruns', rk=1263781623-1

job api:
POST   /job <= job object => bool result and new id 
GET    /job/{id}?projection={} projected item
GET    /job?key=value&projection={} => filtered and projected list
PUT    /job <= job object > bool result and id
DELETE /job/{id} => bool result and id

hk='jobs', rk=guid

